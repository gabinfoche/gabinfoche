#!/usr/bin/env python
# coding: utf-8

"""
Created on Fri May 14 18:39:46 2021
@author: gabif
"""

#Libraries 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
import seaborn as sn


Computer_path='C:\\Users\\gabif\\Downloads\\'

dataset = Computer_path +'BankDataset.csv'

df= pd.read_csv(dataset)


# In[3]:


#Initial Visual of table 
print(df.head())
print(df.shape)


# In[4]:


#Distribution
print(df.describe())


# In[5]:


#Metadata
print(df.info())


# In[186]:


df_duplicates = df[df.duplicated(keep="last")]
print(df_duplicates)


# In[10]:


#Drop duplicates
df=df.drop_duplicates()
print(df.shape)


# In[8]:


corrMatrix = df.corr()
sn.heatmap(corrMatrix, annot=True)

plt.show()


# In[9]:


#Initial Visual of Data
cnt=sn.countplot(x='y', data = df)


# In[7]:


sn.boxplot(data=df,x="y",y="age")
plt.show()


# In[9]:


import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(data=df,x="y",y="duration")
plt.show()


# In[11]:


import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(data=df,x="y",y="campaign")
plt.show()


# In[13]:


import matplotlib.pyplot as plt
df.hist(figsize=(10,12))

plt.show()


# In[16]:


sns.boxplot(data=df,x="y",y="emp.var.rate")
plt.show()


# In[17]:


sns.boxplot(data=df,x="y",y="euribor3m")
plt.show()


# In[18]:


sns.boxplot(data=df,x="y",y="nr.employed")
plt.show()


# In[19]:


sns.boxplot(data=df,x="y",y="cons.price.idx")
plt.show()


# In[20]:


sns.boxplot(data=df,x="y",y="cons.conf.idx")
plt.show()


# In[22]:


df.columns


# In[28]:


sns.pairplot(df, vars=['emp.var.rate', 'cons.price.idx',
       'cons.conf.idx', 'euribor3m', 'nr.employed'])
plt.show()


# In[11]:


#Dropping extra columns

from sklearn.preprocessing import OneHotEncoder
import category_encoders as ce


df=df.drop(['duration','ModelPrediction'],axis=1)

#Separate Data
df_X=df.iloc[:,:-1]
df.loc[df.y == 'no'] = 0
df.loc[df.y == 'yes'] = 1

df_y=df['y']
df_y=df_y.astype('int')

#Encoding
df_X = pd.get_dummies(df_X,columns=['job', 'marital', 'education', 'default', 'housing', 'loan',
       'contact', 'month', 'day_of_week','poutcome'])
print(df_X.info())
print(df_X.tail())


# In[27]:


# Splitting Data 
# 80/20/20
from sklearn.model_selection import train_test_split

#X_train, X_test, y_train, y_test = train_test_split(df_X, df_y, test_size=0.2, random_state=1)
#X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.25, random_state=1)

X_rest, X_test, y_rest, y_test = train_test_split(df_X, df_y, test_size=0.2, random_state=1)
X_train, X_val, y_train, y_val = train_test_split(X_rest, y_rest, test_size=0.2, random_state=1)



print("X_Train: ",X_train.shape)
print("X_Test: ",X_test.shape)
print("y_Train: ",y_train.shape)
print("y_Test: ",y_test.shape)
print("X_Val: ",X_val.shape)
print("y_test: ",y_val.shape)


# In[25]:


from sklearn.linear_model import LogisticRegression
from sklearn import metrics
logistic_regression = LogisticRegression(class_weight='balanced', solver='lbfgs',max_iter=1000)
logistic_regression.fit(X_train,y_train)
y_pred=logistic_regression.predict(X_test)

#confusion_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted'])
#sn.heatmap(confusion_matrix, annot=True)

print('Accuracy: ',metrics.accuracy_score(y_test, y_pred))
plt.show()





