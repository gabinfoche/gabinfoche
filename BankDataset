#!/usr/bin/env python
# coding: utf-8

"""
Created on Fri May 14 18:39:46 2021
@author: gabif
"""

#Libraries 

import pandas as pd

import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
import seaborn as sn


Computer_path='C:\\Users\\gabif\\Downloads\\'

dataset = Computer_path +'BankDataset.csv'

df= pd.read_csv(dataset)


# In[2]:


#Initial Visual of table 
print(df.head())
print(df.shape)


# In[3]:


#Distribution
print(df.describe())


# In[4]:


#Metadata
print(df.info())


# In[5]:


df_duplicates = df[df.duplicated(keep="last")]
print(df_duplicates)


# In[5]:


#Drop duplicates
df=df.drop_duplicates()
print(df.shape)


# In[7]:


corrMatrix = df.corr()
sn.heatmap(corrMatrix, annot=True)

plt.show()


# In[8]:


#Initial Visual of Data
cnt=sn.countplot(x='y', data = df)


# In[9]:


sn.boxplot(data=df,x="y",y="age")
plt.show()


# In[10]:


df_duration=df.copy()
df_duration['duration_mins']=df['duration']/60

sn.boxplot(data=df_duration,x="y",y="duration_mins")

plt.show()


# In[14]:


duration_campaign = sn.lmplot(x='duration_mins', y='campaign',data = df_duration,
                     hue = 'y',
                     fit_reg = False,
                     scatter_kws={'alpha':0.6}, height =7)

plt.axis([0,65,0,65])
plt.ylabel('# of Calls')
plt.xlabel('Duration(Min)')



plt.show()


# In[15]:


import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(data=df,x="y",y="campaign")
plt.show()


# In[16]:


import matplotlib.pyplot as plt
df.hist(figsize=(10,12))

plt.show()


# In[17]:


sns.boxplot(data=df,x="y",y="emp.var.rate")
plt.show()


# In[14]:


sns.boxplot(data=df,x="y",y="euribor3m")
plt.show()


# In[15]:


sns.boxplot(data=df,x="y",y="nr.employed")
plt.show()


# In[16]:


sns.boxplot(data=df,x="y",y="cons.price.idx")
plt.show()


# In[17]:


sns.boxplot(data=df,x="y",y="cons.conf.idx")
plt.show()


# In[18]:


sns.pairplot(df, vars=['emp.var.rate', 'cons.price.idx',
       'cons.conf.idx', 'euribor3m', 'nr.employed'])
plt.show()


# In[18]:


#Deployed Model performance Evaluation
df1=df.copy()
df1 = df1.replace({'y':{'yes':1 ,'no':0}})
df1['ModelPrediction'] = df1['ModelPrediction'].apply(lambda x : 1 if x >= 0.5 else 0)


df1.head()


# In[19]:


#Initial Visual of Data
cnt1=sn.countplot(x='ModelPrediction', data = df1)


# In[20]:


from sklearn import metrics
from sklearn.metrics import log_loss,roc_auc_score, roc_curve
from sklearn.metrics import precision_recall_fscore_support as score, precision_score, recall_score, f1_score

confusion_matrix = pd.crosstab(df1['y'], df1['ModelPrediction'], rownames=['Actual'], colnames=['Predicted'])
sn.heatmap(confusion_matrix, annot=True)
plt.show()
from sklearn.metrics import confusion_matrix

cm1 = confusion_matrix(df1['y'], df1['ModelPrediction'])
print('Confusion Matrix : \n', cm1)

sensitivity1 = cm1[0,0]/(cm1[0,0]+cm1[0,1])
print('Sensitivity : ', sensitivity1 )
specificity1 = cm1[1,1]/(cm1[1,0]+cm1[1,1])
print('Specificity : ', specificity1)


# In[21]:


#Accuracy
print('Accuracy: ',metrics.accuracy_score(df1['y'], df1['ModelPrediction']))


# In[22]:


# recall: tp / (tp + fn)
recall = recall_score(df1['y'], df1['ModelPrediction'])
print('Recall: %f' % recall)


# In[23]:


#Precision
precision = precision_score(df1['y'], df1['ModelPrediction'])
print('Precision: %f' %precision)


# In[24]:


# f1: tp / (tp + fp + fn)
f1 = f1_score(df1['y'], df1['ModelPrediction'])
print('F1 score: %f' % f1)


# In[25]:


df=df.drop(['ModelPrediction'],axis=1)


# In[55]:

#Remodel Preparation
df=df.drop(['ModelPrediction'],axis=1)

#Separate Data
df_X=df.iloc[:,:-1]
df_y=df['y']


# In[57]:


from sklearn.model_selection import train_test_split

train_ratio = 0.80
validation_ratio = 0.20
test_ratio = 0.20

X_train, X_test, y_train, y_test = train_test_split(df_X, df_y, test_size=1 - train_ratio)
X_val, X_test, y_val, y_test = train_test_split(X_test, y_test, test_size=test_ratio/(test_ratio + validation_ratio)) 

print("X_Train: ",X_train.shape)
print("X_Val: ",X_val.shape)
print("X_Test: ",X_test.shape)
print("y_Train: ",y_train.shape)
print("y_Val: ",y_val.shape)
print("y_Test: ",y_test.shape)


# In[58]:


#Encoding
cat_cols = X_train.select_dtypes(include='object').columns

X_train=pd.get_dummies(data=X_train, columns=cat_cols)
X_test=pd.get_dummies(data=X_test, columns=cat_cols)
X_val=pd.get_dummies(data=X_val, columns=cat_cols)

for i in X_train.columns:
    if i not in X_test.columns: X_test[i] = 0
# add missing columns to train dataset with all values being 0
for i in X_test.columns:
    if i not in X_train.columns: X_train[i] = 0   
for i in X_train.columns:
    if i not in X_val.columns: X_val[i] = 0

# use the same column order for the test set as for train
X_test = X_test.reindex(X_train.columns, axis=1)
X_val = X_val.reindex(X_train.columns, axis=1)

y_train.replace({"no":0,"yes":1},inplace=True)
y_test.replace({"no":0,"yes":1},inplace=True)
y_val.replace({"no":0,"yes":1},inplace=True)

print(X_train.shape)
print(X_test.shape)
print(X_val.shape)
print(y_train.shape)
print(y_test.shape)
print(y_val.shape)


# In[23]:


# Removing duration feature 

# From Train
X_train = X_train.drop('duration', axis=1)
# From CV
X_val = X_val.drop('duration', axis=1)
# From Test
X_test = X_test.drop('duration', axis=1)


print(X_train.shape)
print(X_val.shape)
print(X_test.shape)

